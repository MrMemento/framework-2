/*                                                     ___                                                  ,o88888                                               ,o8888888'                         ,:o:o:oooo.        ,8O88Pd8888"                     ,.::.::o:ooooOoOoO. ,oO8O8Pd888'"                   ,.:.::o:ooOoOoOO8O8OOo.8OOPd8O8O" __________________________________________________                  , ..:.::o:ooOoOOOO8OOOOo.FdO8O8" ____________________________________________________                 , ..:.::o:ooOoOO8O888O8O,COCOO"                , . ..:.::o:ooOoOOOO8OOOOCOCO"           ->  The Memento Framework                 . ..:.::o:ooOoOoOO8O8OCCCC"o               -----------------------------------------                    . ..:.::o:ooooOoCoCCC"o:o                ©2011                    . ..:.::o:o:,cooooCo"oo:o: ________________________________________________________                 `   . . ..:.:cocoooo"'o:o:::' ________________________________________________________                 .`   . ..::ccccoc"'o:o:o:::'                :.:.    ,c:cccc"':.:.:.:.:.'              ..:.:"'`::::c:"'..:.:.:.:.:.'            ...:.'.:.::::"'    . . . . .'           .. . ....:."' `   .  . . ''         . . . ...."'         .. . ."'        .*//** * Copyright 2011 by Barnabás Bucsy * * This file is part of The Memento Framework. * * The Memento Framework is free software: you can redistribute it * and/or modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation, either * version 3 of the License, or (at your option) any later version. * * The Memento Framework is distributed in the hope that it will be * useful, but WITHOUT ANY WARRANTY; without even the implied warranty * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with The Memento Framework. If not, see * <http://www.gnu.org/licenses/>. */package com.memento{	import com.memento.core.context.ContextManager;	import flash.events.Event;	import com.memento.Kernel;	/**	 * General skeleton class to initialize Framework dependencies.	 * @see com.memento.Kernel;	 * @author Barnabás Bucsy (Lobo)	 */	public class Framework extends Kernel	{		/**		 * Development ID postfix.		 */		private static const DEBUG_POSTFIX:String = ' [devel]';		/**		 * ID of the Framework.		 */		private static var __frameworkID:String = 'Framework [Hunter]';		/**		 * Version of the Framework.		 */		private static var __frameworkVersion:String = 'v1.0a';		/**		 * The creator of created application. This should be set		 * in descendant's constructor before calling super().		 * Will show up in context menu if set.		 */		public static var CREATOR:String;		/**		 * The URL of the creator to point crator context entry at.		 * This should be set in descendant's constructor before		 * calling super(). Enabled context menu item "creator"		 * will point to this URL.		 */		public static var CREATOR_URL:String;		/**		 * The copyright of created application. This should be set		 * in descendant's constructor before calling super().		 * Will show up in context menu if "creator" item is set.		 * Default is '©', will be postfixed with current UTC year.		 */		public static var COPYRIGHT:String;		/**		 * Flag for telling the application that it is being		 * compiled with development settings turned on.		 */		public static var DEBUG:Boolean;		/**		 * Constructor		 * @throws Error Kernel throws error if this is not the base class.		 * @see com.memento.Kernel		 */		public function Framework( ):void		{			//-------------			// INHERITANCE			//-------------			// ensure we have an ID			if ( !ID || ID == '' )			{				trace( 'WARNING: No ID present in Framework, will use default ID.' );				ID = __frameworkID;			}			// ensure we have a version			if ( !VERSION || VERSION == '' )			{				trace( 'WARNING: No VERSION present in Framework, will use default VERSION.' );				VERSION = __frameworkVersion;			}			// check development mode			// check it against compilation mode as well			DEBUG = DEBUG || CONFIG::debug;			if ( DEBUG )			{				VERSION += DEBUG_POSTFIX;			}			// run the Kernel Constructor			super( );			//--------------			// CONTEXT MENU			//--------------			ContextManager.clearContext( this );			ContextManager.addMenuItem( this, ID + ' ' +  VERSION );			if ( CREATOR != null )			{				ContextManager.addNavigationMenuItem( this, CREATOR, CREATOR_URL );			}			if ( !COPYRIGHT || COPYRIGHT == '' )			{				COPYRIGHT = '©';			}			ContextManager.addMenuItem( this, COPYRIGHT + ' ' + new Date( ).getUTCFullYear( ).toString( ) );			// wait one frame for components to init			addEventListener( Event.ENTER_FRAME, internalInit );		}		/**		 * Private function listening for ENTER_FRAME Event.		 * Some AS nad Flash based components need one frema,		 * to finish their init procedure.		 * @param event_ Event ENTER_FRAME Event.		 */		private function internalInit( event_:Event ):void		{			removeEventListener( Event.ENTER_FRAME, internalInit );			// call entry point			init( );		}		/**		 * Entry point for created applications. Must be overridden.		 * @throws Error Must be overridden.		 */		protected function init( ):void		{			throw new Error( 'Framework\'s init() function must be overridden!' );		}		/**		 * Getter function for Framework ID.		 * @return String The Framework ID.		 */		public static function get FRAMEWORK_ID( ):String		{			return __frameworkID;		}		/**		 * Getter function for Framework version.		 * @return String The Framework version.		 */		public static function get FRAMEWORK_VERSION( ):String		{			return __frameworkVersion;		}	}}