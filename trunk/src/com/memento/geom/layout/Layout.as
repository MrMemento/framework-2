/** * Copyright 2011 by Barnabás Bucsy * * This file is part of The Memento Framework. * * The Memento Framework is free software: you can redistribute it * and/or modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation, either * version 3 of the License, or (at your option) any later version. * * The Memento Framework is distributed in the hope that it will be * useful, but WITHOUT ANY WARRANTY; without even the implied warranty * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with The Memento Framework. If not, see * <http://www.gnu.org/licenses/>. */package com.memento.geom.layout{	import flash.display.DisplayObject;	import flash.geom.Rectangle;	import com.memento.constants.Alignment;	import com.memento.constants.Scale;	import com.memento.constants.Fit;	/**	 * STATIC Class for calculating proper fit of DisplayObjects or Rectangles.	 * Can manage scaling with and without maintaining the aspect ratio and	 * alignment of target.	 * @author Barnabás Bucsy (Lobo)	 */	public class Layout	{		/**		 * Constructor		 * @throws Error Static Class.		 */		public function Layout( ):void		{			throw new Error( 'Tried to instantiate static class!' );		}		/**		 * Function for fitting Rectangle or DisplayObject into a Rectangle.		 * @param toFit_ * Rectangle or DisplayObject to fit.		 * @param ref_ Rectangle Reference Rectangle to fit into.		 * @param fit_ String Type of Fit to use.		 * @param scale_ Type of Scale to use.		 * @param align_ Type of Alignment to use.		 * @return Rectangle If Rectangle is given as toFit_, a Rectangle will be returned. Else null.		 * @throws Error Throws Error if properties can not be accessed on toFit_.		 * @see com.memento.constants.Alignment		 * @see com.memento.constants.Scale		 * @see com.memento.constants.Fit		 */		public static function fit(			toFit_:*,			ref_:Rectangle,			fit_:String   = '',			scale_:String = '',			align_:String = ''		):Rectangle		{			if ( !( toFit_ is Rectangle || toFit_ is DisplayObject ) )			{				throw new Error( 'Tried to fit wrong type of object:' + toFit_ );			}			var rat:Number;			switch ( fit_ )			{				case Fit.INNER_FIT:					rat = Math.min( ref_.width / toFit_.width, ref_.height / toFit_.height );					switch( scale_ )					{						case Scale.DOWNSCALE:							if ( toFit_.width > ref_.width || toFit_.height > ref_.height )							{								toFit_.width  = toFit_.width  * rat;								toFit_.height = toFit_.height * rat;							}							break;						case Scale.UPSCALE:							if ( toFit_.width < ref_.width && toFit_.height < ref_.height )							{								toFit_.width  = toFit_.width  * rat;								toFit_.height = toFit_.height * rat;							}							break;						case Scale.BOTH_SCALE:							toFit_.width  = toFit_.width  * rat;							toFit_.height = toFit_.height * rat;							break;						case Scale.STRECH_SCALE:							toFit_.width  = ref_.width;							toFit_.height = ref_.height;							break;						case Scale.NO_SCALE:						default:							break;					}					break;				case Fit.OUTER_FIT:					rat = Math.max( ref_.width / toFit_.width, ref_.height / toFit_.height );					switch( scale_ )					{						case Scale.DOWNSCALE:							if ( toFit_.width > ref_.width * rat || toFit_.height > ref_.height * rat )							{								toFit_.width  = toFit_.width  * rat;								toFit_.height = toFit_.height * rat;							}							break;							case Scale.UPSCALE:							if ( toFit_.width < ref_.width * rat && toFit_.height < ref_.height * rat )							{								toFit_.width  = toFit_.width  * rat;								toFit_.height = toFit_.height * rat;							}							break;							case Scale.BOTH_SCALE:							toFit_.width  = toFit_.width  * rat;							toFit_.height = toFit_.height * rat;							break;							case Scale.STRECH_SCALE:							toFit_.width  = ref_.width;							toFit_.height = ref_.height;							break;							case Scale.NO_SCALE:						default:							break;					}					break;				case Fit.NO_FIT:					default:					break;			}			switch ( align_ )			{				case Alignment.TOP_LEFT:					toFit_.x = ref_.x/* + ( ref_.width  - toFit_.width )  *0*/;					toFit_.y = ref_.y/* + ( ref_.height - toFit_.height ) *0*/;					break;				case Alignment.TOP:					toFit_.x = ref_.x + ( ref_.width  - toFit_.width )  *0.5;					toFit_.y = ref_.y/* + ( ref_.height - toFit_.height ) *0*/;					break;				case Alignment.TOP_RIGHT:					toFit_.x = ref_.x + ( ref_.width  - toFit_.width )  *1.0;					toFit_.y = ref_.y/* + ( ref_.height - toFit_.height ) *0*/;					break;				case Alignment.LEFT:					toFit_.x = ref_.x/* + ( ref_.width  - toFit_.width )  *0*/;					toFit_.y = ref_.y + ( ref_.height - toFit_.height) *0.5;					break;				case Alignment.CENTER:					toFit_.x = ref_.x + ( ref_.width  - toFit_.width )  *0.5;					toFit_.y = ref_.y + ( ref_.height - toFit_.height ) *0.5;					break;				case Alignment.RIGHT:					toFit_.x = ref_.x + ( ref_.width  - toFit_.width )  *1.0;					toFit_.y = ref_.y + ( ref_.height - toFit_.height ) *0.5;					break;				case Alignment.BOTTOM_LEFT:					toFit_.x = ref_.x/* + ( ref_.width  - toFit_.width )  *0*/;					toFit_.y = ref_.y + ( ref_.height - toFit_.height ) *1;					break;				case Alignment.BOTTOM:					toFit_.x = ref_.x + ( ref_.width  - toFit_.width )  *0.5;					toFit_.y = ref_.y + ( ref_.height - toFit_.height ) *1.0;					break;				case Alignment.BOTTOM_RIGHT:					toFit_.x = ref_.x + ( ref_.width  - toFit_.width )  *1.0;					toFit_.y = ref_.y + ( ref_.height - toFit_.height ) *1.0;					break;				case Alignment.NONE:				default:					break;			}			if ( toFit_.x < 0 )			{				toFit_.x = Math.floor( toFit_.x );			}			else			{				toFit_.x = Math.ceil( toFit_.x );			}			if ( toFit_.y < 0 )			{				toFit_.y = Math.floor( toFit_.y );			}			else			{				toFit_.y = Math.ceil( toFit_.y );			}			toFit_.width  = Math.ceil( toFit_.width );			toFit_.height = Math.ceil( toFit_.height );			if ( toFit_ is Rectangle )			{				return toFit_;			}			return null;		}	}}