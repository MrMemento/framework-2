/** * Copyright 2011 by Barnabás Bucsy * * This file is part of The Memento Framework. * * The Memento Framework is free software: you can redistribute it * and/or modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation, either * version 3 of the License, or (at your option) any later version. * * The Memento Framework is distributed in the hope that it will be * useful, but WITHOUT ANY WARRANTY; without even the implied warranty * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with The Memento Framework. If not, see * <http://www.gnu.org/licenses/>. */package com.memento.debug.sampling{	import flash.sampler.startSampling;	import flash.sampler.pauseSampling;	import flash.sampler.stopSampling;	import flash.sampler.getSamples;	import flash.sampler.clearSamples;	import flash.system.Capabilities;	import com.memento.core.system.FlashPlayer;	import com.memento.core.singleton.Singleton;	/**	 * SINGLETON Class for tracking procedure.	 * @see flash.sampler	 * @author Barnabás Bucsy (Lobo)	 */	public class SampleCollector extends Singleton	{		/**		 * Flag indicating sampling in progress.		 */		private var _running:Boolean;		/**		 * Counter for pause / restart attempts to synchronize them through trackings.		 */		private var _counter:uint;		/**		 * Constructor		 * throws Error Throws Error if SampleCollector is not available on Flash Player version.		 */		public function SampleCollector( ):void		{			if ( !AVAILABLE )			{				throw new Error( 'SampleCollector is not available on Flash Player version!' );			}			_running = false;			_counter = 0;		}		/**		 * Starts sampling.		 */		public function start( ):void		{			if ( !_running )			{				startSampling( );			}			_running = true;			_counter = 0;		}		/**		 * Pauses sampling.		 */		public function pause( ):void		{			if ( _counter == 0 )			{				pauseSampling( );			}			_counter++;		}		/**		 * Resumes paused sampling.		 */		public function resume( ):void		{			if ( _counter > 0 )			{				_counter--;			}			else			{				startSampling( );			}		}		/**		 * Stops sampling.		 */		public function stop( ):void		{			if ( _running )			{				stopSampling( );			}			_running = false;			_counter = 0;		}		/**		 * Getter function for whether the instance is collecting data.		 * @return Boolean Is the instance collecting data.		 */		public function get running( ):Boolean		{			return _running;		}		/**		 * Getter function for collected samples.		 * @return Boolean Is the instance collecting data.		 */		public function get samples( ):Object		{			var s:Object = getSamples( );			clearSamples( );			return s;		}		/**		 * Getter function whether sampling is available.		 * @return Boolean Is sampling available.		 */		public static function get AVAILABLE( ):Boolean		{			return FlashPlayer.DEBUGGER && FlashPlayer.hasVersion( 9, 0, 115 );		}	}}