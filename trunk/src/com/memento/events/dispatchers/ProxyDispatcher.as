/** * Copyright 2011 by Barnabás Bucsy * * This file is part of The Memento Framework. * * The Memento Framework is free software: you can redistribute it * and/or modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation, either * version 3 of the License, or (at your option) any later version. * * The Memento Framework is distributed in the hope that it will be * useful, but WITHOUT ANY WARRANTY; without even the implied warranty * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with The Memento Framework. If not, see * <http://www.gnu.org/licenses/>. */package com.memento.events.dispatchers{	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IEventDispatcher;	import flash.utils.Proxy;	/**	 * Extended Proxy Class to mimict extension of EventDispatcher Class as well.	 * @see flash.utils.Proxy;	 * @see flash.events.EventDispatcher;	 */	public class ProxyDispatcher extends Proxy implements IEventDispatcher	{		/**		 * Instance of EventDispatcher.		 */		private var _dispatcher:EventDispatcher;		/**		 * Constructor		 * @param dispatcher_ EventDispatcher The dispatcher to use. If null, a new EventDispatcher will be created.		 */		public function ProxyDispatcher( dispatcher_:EventDispatcher = null ):void		{			if ( dispatcher_ === null )			{				_dispatcher = new EventDispatcher( this );			}			else			{				_dispatcher = dispatcher_;			}		}		/**		 * @copy EventDispatcher#addEventListener		 */		public function addEventListener(			type_:String,			listener_:Function,			useCapture_:Boolean       = false,			priority_:int             = 0,			useWeakReference_:Boolean = false		):void		{			_dispatcher.addEventListener(				type_,				listener_,				useCapture_,				priority_,				useWeakReference_			);		}		/**		 * @copy EventDispatcher#removeEventListener		 */		public function removeEventListener( type_:String, listener_:Function, useCapture_:Boolean = false ):void		{			_dispatcher.removeEventListener( type_, listener_, useCapture_ );		}		/**		 * @copy EventDispatcher#dispatchEvent		 */		public function dispatchEvent( event_:Event ):Boolean		{			return _dispatcher.dispatchEvent( event_ );		}		/**		 * @copy EventDispatcher#hasEventListener		 */		public function hasEventListener( type_:String ):Boolean		{			return _dispatcher.hasEventListener( type_ );		}		/**		 * @copy EventDispatcher#willTrigger		 */		public function willTrigger( type_:String ):Boolean		{			return _dispatcher.willTrigger( type_ );		}	}}