/** * Copyright 2011 by Barnabás Bucsy * * This file is part of The Memento Framework. * * The Memento Framework is free software: you can redistribute it * and/or modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation, either * version 3 of the License, or (at your option) any later version. * * The Memento Framework is distributed in the hope that it will be * useful, but WITHOUT ANY WARRANTY; without even the implied warranty * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with The Memento Framework. If not, see * <http://www.gnu.org/licenses/>. */package com.memento.core.regexp{	import com.memento.core.system.GarbageCollector;	import com.memento.utils.ObjectUtil;	import com.memento.utils.StringUtil;	import com.memento.core.singleton.Singleton;	/**	 * SINGLETON Class for collecting commonly used regular expressions.	 * @author Barnabás Bucsy (Lobo)	 */	public final class RegExpCollector extends Singleton	{		/**		 * Constant for RegExp global flag.		 */		public static const GLOBAL:String = 'g';		/**		 * Constant for RegExp ignore case flag.		 */		public static const IGNORE_CASE:String = 'i';		/**		 * Constant for RegExp multiline flag.		 */		public static const MULTILINE:String = 'm';		/**		 * Constant for RegExp dot all flag.		 */		public static const DOT_ALL:String = 's';		/**		 * Constant for RegExp extended flag.		 */		public static const EXTENDED:String = 'x';		/**		 * Static reference for instance;		 */		private static var __this:RegExpCollector;		/**		 * Flag for storing GarbageCollector registered status.		 */		private static var __registered:Boolean = false;		/**		 * Constant for no RegExp flags.		 */		public static const NONE:String = 'none';		/**		 * Container for stored expressions.		 */		private var _expressions:Object;		/**		 * Constructor		 */		public function RegExpCollector( ):void		{			super( );			_expressions = { };			__this       = this;		}		/**		 * Getter function for commonly used regular expression.		 * @param expression_ String  The expression to copile.		 * @param global_ Boolean RegExp global flag. Defaults to false.		 * @param ignoreCase_ Boolean RegExp ignore case flag. Defaults to false.		 * @param multiline_ Boolean RegExp multiline flag. Defaults to false.		 * @param dotAll_ Boolean RegExp dot all flag. Defaults to false.		 * @param extended_ Boolean RegExp extended flag. Defaults to false.		 * @return RegExp The regular expression.		 * @see RegExp;		 */		public function get(			expression_:String,			global_:Boolean     = false,			ignoreCase_:Boolean = false,			multiline_:Boolean  = false,			dotAll_:Boolean     = false,			extended_:Boolean   = false		):RegExp		{			// generate flags			var flags:String = StringUtil.EMPTY;			if ( global_ )			{				flags += GLOBAL;			}			if ( ignoreCase_ )			{				flags += IGNORE_CASE;			}			if ( multiline_ )			{				flags += MULTILINE;			}			if ( dotAll_ )			{				flags += DOT_ALL;			}			if ( extended_ )			{				flags += EXTENDED;			}			if ( flags == StringUtil.EMPTY )			{				flags = NONE;			}			// lookup container			if ( _expressions[ flags ] == null )			{				_expressions[ flags ] = { };			}			// lookup expression			if ( _expressions[ flags ][ expression_ ] == null )			{				_expressions[ flags ][ expression_ ] = new RegExp(					expression_,					flags == NONE ? StringUtil.EMPTY : flags				);			}			// reset lastIndex			_expressions[ flags ][ expression_ ].lastIndex = 0;			// manage disposing pool			if ( !__registered )			{				GarbageCollector.register( RegExpCollector );				__registered = true;			}			// return expression			return _expressions[ flags ][ expression_ ];		}		/**		 * Clears all stored data from pools.		 */		public static function dispose( ):void		{			if ( __this != null )			{				ObjectUtil.clear( __this._expressions );			}			if ( __registered )			{				GarbageCollector.unregister( RegExpCollector );				__registered = false;			}		}	}}