/** * Copyright 2011 by Barnabás Bucsy * * This file is part of The Memento Framework. * * The Memento Framework is free software: you can redistribute it * and/or modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation, either * version 3 of the License, or (at your option) any later version. * * The Memento Framework is distributed in the hope that it will be * useful, but WITHOUT ANY WARRANTY; without even the implied warranty * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with The Memento Framework. If not, see * <http://www.gnu.org/licenses/>. */package com.memento.core.net.loaders{	import flash.display.Loader;	import flash.net.URLRequest;	import flash.system.LoaderContext;	import com.memento.converters.Base64Converter;	/**	 * Wrapper Class for Loader Class to force it using a PHP	 * proxy. This way we can bypass Flash's Security Sandbox	 * Errors.	 * @see com.memento.data.converters.Base64Converter	 * @author Barnabás Bucsy (Lobo)	 */	public class PHPProxyLoader extends Loader	{		/**		 * Static flag for switching proxy on and off.		 */		public static var USE_PHP_PROXY:Boolean = false;		/**		 * Location and name of proxy PHP on server.		 */		public static var PROXY_URL:String = './flash_proxy.php';		/**		 * Constructor		 */		public function PHPProxyLoader( ):void		{			super( );		}		/**		 * Overridden load() function modifies request_'s		 * URL if proxy usage is turned on. Created URL		 * will be constructed from static PROXY_URL and		 * added GET parameter which is '?url=' and the		 * Base64 encoded original request URL.		 */		override public function load( request_:URLRequest, context_:LoaderContext = null ):void		{			if ( USE_PHP_PROXY )			{				request_.url = PROXY_URL + '?url=' + Base64Converter.encode( request_.url );			}			super.load( request_, context_ );		}	}}