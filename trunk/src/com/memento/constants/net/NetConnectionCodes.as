/** * Copyright 2011 by Barnabás Bucsy * * This file is part of The Memento Framework. * * The Memento Framework is free software: you can redistribute it * and/or modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation, either * version 3 of the License, or (at your option) any later version. * * The Memento Framework is distributed in the hope that it will be * useful, but WITHOUT ANY WARRANTY; without even the implied warranty * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with The Memento Framework. If not, see * <http://www.gnu.org/licenses/>. */package com.memento.constants.net{	/**	 * STATIC Class for NetStatusEvent info codes coming from NetConnection.	 * @author Barnabás Bucsy (Lobo)	 */	public class NetConnectionCodes	{		/**		 * Error		 * Packet encoded in an unidentified format.		 */		public static const CALL_BADVERSION:String = "NetConnection.Call.BadVersion";		/**		 * Error		 * The NetConnection.call method was not able to invoke the server-side method or command.		 * */		public static const CALL_FAILED:String = "NetConnection.Call.Failed";		/**		 * Error		 * An Action Message Format (AMF) operation is prevented for security reasons.		 * Either the AMF URL is not in the same domain as the file containing the code calling the NetConnection.call() method,		 * or the AMF server does not have a policy file that trusts the domain of the the		 * file containing the code calling the NetConnection.call() method.		 */		public static const CALL_PROHIBITED:String = "NetConnection.Call.Prohibited";		/**		 * Status		 * The connection was closed successfully.		 */		public static const CONNECT_CLOSED:String = "NetConnection.Connect.Closed";		/**		 * Error		 * The connection attempt failed.		 */		public static const CONNECT_FAILED:String = "NetConnection.Connect.Failed";		/**		 * Status		 * The connection attempt succeeded.		 */		public static const CONNECT_SUCCESS:String = "NetConnection.Connect.Success";		/**		 * Error		 * The connection attempt did not have permission to access the application.		 */		public static const CONNECT_REJECTED:String = "NetConnection.Connect.Rejected";		/**		 * Error		 * The specified application is shutting down.		 */		public static const CONNECT_APPSHUTDOWN:String = "NetConnection.Connect.AppShutdown";		/**		 * Error		 * The application name specified during connect is invalid.		 */		public static const CONNECT_INVALIDAPP:String = "NetConnection.Connect.InvalidApp";		/**		 * Constructor		 * @throws Error Static Class.		 */		public function NetConnectionCodes( ):void		{			throw new Error( 'Called constructor of a static class!' );		}    }}/*	switch ( event_.info.code )	{		case NetConnectionCodes.CALL_BADVERSION:			break;		case NetConnectionCodes.CALL_FAILED:			break;		case NetConnectionCodes.CALL_PROHIBITED:			break;		case NetConnectionCodes.CONNECT_CLOSED:			break;		case NetConnectionCodes.CONNECT_FAILED:			break;		case NetConnectionCodes.CONNECT_SUCCESS:			break;		case NetConnectionCodes.CONNECT_REJECTED:			break;		case NetConnectionCodes.CONNECT_APPSHUTDOWN:			break;		case NetConnectionCodes.CONNECT_INVALIDAPP:			break;		default:			break;	}*/