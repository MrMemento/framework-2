/** * Copyright 2011 by Barnabás Bucsy * * This file is part of The Memento Framework. * * The Memento Framework is free software: you can redistribute it * and/or modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation, either * version 3 of the License, or (at your option) any later version. * * The Memento Framework is distributed in the hope that it will be * useful, but WITHOUT ANY WARRANTY; without even the implied warranty * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with The Memento Framework. If not, see * <http://www.gnu.org/licenses/>. */package com.memento.constants.net{	/**	 * STATIC Class for NetStatusEvent info codes coming from NetStreams.	 * @author Barnabás Bucsy (Lobo)	 */	public class NetStreamCodes	{		/**		 * Status		 * The subscriber has paused playback.		 */		public static const PAUSE_NOTIFY:String = 'NetStream.Pause.Notify';		/**		 * Status		 * Playback has completed.		 */		public static const PLAY_COMPLETE:String = 'NetStream.Play.Complete';		/**		 * Error		 * An error has occurred in playback for a reason other than those listed elsewhere in this table, such as the subscriber not having read access.		 */		public static const PLAY_FAILED:String = 'NetStream.Play.Failed';		/**		 * Warning		 * Data is playing behind the normal speed.		 */		public static const PLAY_INSUFFICIENT_BW:String = 'NetSream.Play.InsufficientBW';		/**		 * Status		 * Publishing has begun; this message is sent to all subscribers.		 */		public static const PLAY_PUBLISH_NOTIFY:String = 'NetStream.Play.PublishNotify';		/**		 * Status		 * The playlist has reset (pending play commands have been flushed).		 */		public static const PLAY_RESET:String = 'NetStream.Play.Reset';		/**		 * Status		 * Playback has started.		 */		public static const PLAY_START:String = 'NetStream.Play.Start';		/**		 * Status		 * Playback has stopped.		 */		public static const PLAY_STOP:String = 'NetStream.Play.Stop';		/**		 * Error		 * The client tried to play a live or recorded stream that does not exist.		 */		public static const PLAY_STREAM_NOT_FOUND:String = 'NetStream.Play.StreamNotFound';		/**		 * Status		 * The subscriber is switching from one stream to another in a playlist.		 */		public static const PLAY_SWITCH:String = 'NetStream.Play.Switch';		/**		 * Status		 * Publishing has stopped; this message is sent to all subscribers.		 */		public static const PLAY_UNPUBLISH_NOTIFY:String = 'NetStream.Play.UnpublishNotify';		/**		 * Error		 * The client tried to publish a stream that is already being published by someone else.		 */		public static const PUBLISH_BAD_NAME:String = 'NetStream.Publish.BadName';		/**		 * Status		 * The publisher of the stream has been idling for too long.		 */		public static const PUBLISH_IDLE:String = 'NetStream.Publish.Idle';		/**		 * Status		 * Publishing has started.		 */		public static const PUBLISH_START:String = 'NetStream.Publish.Start';		/**		 * Error		 * An error has occurred in recording for a reason other than those listed elsewhere in this table; for example, the disk is full.		 */		public static const RECORD_FAILED:String = 'NetStream.Record.Failed';				/**		 * Error		 * The client tried to record a stream that is still playing, or the client tried to record (overwrite) a stream that already exists on the server with read-only status.		 */		public static const RECORD_NO_ACCESS:String = 'NetStream.Record.NoAccess';		/**		 * Status		 * Recording has started.		 */		public static const RECORD_START:String = 'NetStream.Record.Start';		/**		 * Status		 * Recording has stopped.		 */		public static const RECORD_STOP:String = 'NetStream.Record.Stop';		/**		 * Error		 * The subscriber tried to use the seek command to move to a particular location in the recorded stream, but failed.		 */		public static const SEEK_FAILED:String = 'NetStream.Seek.Failed';		/**		 * Status		 * The subscriber has used the seek command to move to a particular location in the recorded stream.		 */		public static const SEEK_NOTIFY:String = 'NetStream.Seek.Notify';		/**		 * Error		 */		public static const SEEK_INVALID_TIME:String = 'NetStream.Seek.InvalidTime';		/**		 * Status		 * The subscriber has resumed playback.		 */		public static const UNPAUSE_NOTIFY:String = 'NetStream.Unpause.Notify';		/**		 * Status		 * Publishing has stopped.		 */		public static const UNPUBLISH_SUCCESS:String = 'NetStream.Unpublish.Success';		/**		 * Status		 * Buffer is full.		 */		public static const BUFFER_FULL:String = 'NetStream.Buffer.Full';		/**		 * Status		 * Buffer is empty.		 */		public static const BUFFER_EMPTY:String = 'NetStream.Buffer.Empty';		/**		 * Status		 * Buffer flushed.		 */		public static const BUFFER_FLUSH:String = 'NetStream.Buffer.Flush';		/**		 * Constructor		 * @throws Error Static Class.		 */		public function NetStreamCodes( ):void		{			throw new Error( 'Called constructor of a static class!' );		}    }}/*	switch ( event_.info.code )	{		case NetStreamCodes.PAUSE_NOTIFY:			break;		case NetStreamCodes.PLAY_COMPLETE:			break;		case NetStreamCodes.PLAY_FAILED:			break;		case NetStreamCodes.PLAY_INSUFFICIENT_BW:			break;		case NetStreamCodes.PLAY_PUBLISH_NOTIFY:			break;		case NetStreamCodes.PLAY_RESET:			break;		case NetStreamCodes.PLAY_START:			break;		case NetStreamCodes.PLAY_STOP:			break;		case NetStreamCodes.PLAY_STREAM_NOT_FOUND:			break;		case NetStreamCodes.PLAY_SWITCH:			break;		case NetStreamCodes.PLAY_UNPUBLISH_NOTIFY:			break;		case NetStreamCodes.PUBLISH_BAD_NAME:			break;		case NetStreamCodes.PUBLISH_IDLE:			break;		case NetStreamCodes.PUBLISH_START:			break;		case NetStreamCodes.RECORD_FAILED:			break;		case NetStreamCodes.RECORD_NO_ACCESS:			break;		case NetStreamCodes.RECORD_START:			break;		case NetStreamCodes.RECORD_STOP:			break;		case NetStreamCodes.SEEK_FAILED:			break;		case NetStreamCodes.SEEK_NOTIFY:			break;		case NetStreamCodes.SEEK_INVALID_TIME:			break;		case NetStreamCodes.UNPAUSE_NOTIFY:			break;		case NetStreamCodes.UNPUBLISH_SUCCESS:			break;		case NetStreamCodes.BUFFER_FULL:			break;		case NetStreamCodes.BUFFER_EMPTY:			break;		case NetStreamCodes.BUFFER_FLUSH:			break;		default:			break;	}*/