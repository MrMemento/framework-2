/** * Copyright 2011 by Barnabás Bucsy * * This file is part of The Memento Framework. * * The Memento Framework is free software: you can redistribute it * and/or modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation, either * version 3 of the License, or (at your option) any later version. * * The Memento Framework is distributed in the hope that it will be * useful, but WITHOUT ANY WARRANTY; without even the implied warranty * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with The Memento Framework. If not, see * <http://www.gnu.org/licenses/>. */package com.memento.constants.patterns{	/**	 * STATIC Class, contains common replace patterns based on Python.	 * @author Barnabás Bucsy (Lobo)	 */	public class DateReplacePatterns	{		/**		 * Constant for full 4 digit year.		 * eg. "Y" => "1984"		 */		public static const FULL_YEAR:String = 'Y';		/**		 * Constant for short 2 digit year.		 * eg. "y" => "84"		 */		public static const SHORT_YEAR:String = 'y';		/**		 * Constant for textual representation of month.		 * eg. "M" => "March"		 */		public static const MONTH:String = 'M';		/**		 * Constant for short textual representation of month.		 * eg. "m" => "Mar"		 */		public static const MONTH_SHORT:String = 'm';		/**		 * Constant for numeric representation of month on any digits.		 * Numeric quantifier can be used for numebr of digits.		 * eg. "#m{2}" => "03"		 */		public static const MONTH_NUMERIC:String = '#m';		/**		 * Constant for textual representation of day.		 * eg. "D" => "Sunday"		 */		public static const DAY:String = 'D';		/**		 * Constant for short textual representation of day.		 * eg. "d" => "Sun"		 */		public static const DAY_SHORT:String = 'd';		/**		 * Constant for numeric representation of day on two digits based on the month.		 * Numeric quantifier can be used for numebr of digits.		 * eg. "#d{2}" => "01"		 */		public static const DAY_NUMERIC:String = '#d';		/**		 * Constant for ISO 8601 week number.		 */		public static const WEEK:String = 'W';		/**		 * Constant for two digit representation of hour in 24 hours mode.		 * eg. "H" => "15"		 */		public static const HOURS:String = 'H';		/**		 * Constant for two digit representation of hour in 12 hours mode.		 * eg. "H" => "03"		 */		public static const HOURS_12:String = 'h';		/**		 * Constant for two digit representation of minute.		 * eg. "i" => "15"		 */		public static const MINUTES:String = 'i';		/**		 * Constant for two digit representation of minute.		 * eg. "i" => "15"		 */		public static const SECONDS:String = 's';		/**		 * Constant for three digit representation of millisecond.		 * eg. "mi" => "15"		 */		public static const MILLISECONDS:String = 'ms';		/**		 * Constant for Ante Meridiem and Post Meridiem.		 * eg. "a" => "pm"		 */		public static const AMPM:String = 'a';		/**		 * Constant for upper case Ante Meridiem and Post Meridiem.		 * eg. "A" => "PM"		 */		public static const AMPM_UPPER:String = 'A';		/**		 * Constant for matching all Date replace patterns, which are not escaped.		 */		public static const ALL_PATTERNS:String =			'(?<!\\\\)(?:'			+	// non escaped				'#m(?:{(\\d+)})?'	+	// digital month (quantified)				'|'					+	// or				'#d(?:{(\\d+)})?'	+	// digital day (quantified)				'|'					+	// or				'ms'				+	// milliseconds				'|'					+	// or				'[aAyYmMdDhHisW]'	+	// one character placeholders			')';		/**		 * Constant for matching all escaped replace patterns.		 */		public static const ESCAPED_PATTERNS:String = '\\\\([aAyYmMdDhHisW])';		/**		 * Constructor		 * @throws Error Static Class.		 */		public function DateReplacePatterns( ):void		{			throw new Error( 'Tried to instantiate static class!' );		}	}}