/** * Copyright 2011 by Barnabás Bucsy * * This file is part of The Memento Framework. * * The Memento Framework is free software: you can redistribute it * and/or modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation, either * version 3 of the License, or (at your option) any later version. * * The Memento Framework is distributed in the hope that it will be * useful, but WITHOUT ANY WARRANTY; without even the implied warranty * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with The Memento Framework. If not, see * <http://www.gnu.org/licenses/>. */package com.memento.constants.patterns{	import com.memento.constants.patterns.ReplacePatterns;	/**	 * STATIC Class, contains typograpfy based RegExp patterns.	 * @author Barnabás Bucsy (Lobo)	 */	public class TypographyPatterns	{		/**		 * Constant for a character.		 */		public static const CHARACTER:String = '.';		/**		 * Constant for a whitespace.		 */		public static const SPACE:String = '\\s';		/**		 * Constant for one or more whitespace.		 */		public static const SPACES:String = '\\s+';		/**		 * Constant for a new line character.		 */		public static const NEW_LINE:String = '(?:\\n\\r?)';		/**		 * Constant for one or more new line character.		 */		public static const NEW_LINES:String = '(?:\\n\\r?)+';		/**		 * Constant for one or more new line character.		 * @see com.memento.constants.patterns.ReplacePatterns		 */		public static const NUMEROUS_EOL:String = '(?:\\n\\r?){' + ReplacePatterns.DECIMAL + ',}';		/**		 * Constant for one or more space or new line character.		 */		public static const SPACES_OR_NEW_LINES:String = '((?:\\n\\r?)|\\s)+';		/**		 * Constant for ASCII word character.		 */		public static const WORD_CHAR:String = '\\w';		/**		 * Constant for ASCII word sequence.		 */		public static const WORD_CHARS:String = '\\w+';		/**		 * Constant for first ASCII word with starting whitespaces.		 */		public static const FIRST_WORD_CHAR:String = '^(?:(?:\\n\\r?)|\\s)*)\\w';		/**		 * Constant for first character with starting whitespaces.		 */		public static const FIRST_CHAR:String = '^(?:(?:\\n\\r?)|\\s)*.';		/**		 * Constant for first character with starting whitespaces.		 */		public static const FIRST_WORD:String = '^(?:(?:\\n\\r?)|\\s)*[^\\n\\r\\s]+';		/**		 * Constant for every assumed word with starting whitespaces.		 */		public static const WORDS:String = '(?:(?:\\n\\r?)|\\s)*[^\\n\\r\\s]+';		/**		 * Pattern for word wrapping text based on character number.		 */		public static const WORD_WRAP:String =			'(.{1,' + ReplacePatterns.DECIMAL + '})'	+	// characters quantified from 1 to max column length			'(?: +|$\\n?)'								+	// followed by any spaces or newline character (non capturing)			'|'											+	// or			'(.{1,' + ReplacePatterns.DECIMAL + '})';		// characters quantified from 1 to max column length		/**		 * Constructor		 * @throws Error Static Class.		 */		public function TypographyPatterns( ):void		{			throw new Error( 'Tried to instantiate static class!' );		}	}}