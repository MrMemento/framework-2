/** * Copyright 2011 by Barnabás Bucsy * * This file is part of The Memento Framework. * * The Memento Framework is free software: you can redistribute it * and/or modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation, either * version 3 of the License, or (at your option) any later version. * * The Memento Framework is distributed in the hope that it will be * useful, but WITHOUT ANY WARRANTY; without even the implied warranty * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with The Memento Framework. If not, see * <http://www.gnu.org/licenses/>. */package com.memento.geom.graphics{	import flash.display.Graphics;	import flash.geom.Rectangle;	import com.memento.constants.Trigonometry;	/**	 * STATIC Class for polygon drawing.	 * @author Barnabás Bucsy (Lobo)	 */	public class Drawer	{		/**		 * Constructor		 * @throws Error Static Class.		 */		public function Drawer( ):void		{			throw new Error( 'Tried to instantiate static class!' );		}		/**		 * Function for drawing polygon inside Graphics object.		 * @param graphics_ Graphics The Graphics to draw to.		 * @param sides_ uint Number of Polygon sides.		 * @param radius Number Radius of Polygon.		 * @param x_ Number Center X of Polygon.		 * @param y_ Number Center Y of Polygon.		 */		public static function drawPolygon(			graphics_:Graphics,			sides_:int,			radius_:Number,			x_:Number = 0,			y_:Number = 0		):void		{			// init private vars			var ratio:int = 360 / sides_;			var top:int   = y_ - radius_;			// move to first point to start drawing polygon			graphics_.moveTo( x_, top );			// loop through complete polygon			for ( var i:uint = 0; i <= 360; i += ratio )			{				// calculate new lineTo( x_, y_ )				var xPos:Number = Math.sin( Trigonometry.ANGLE_TO_RADS * i ) * radius_;				var yPos:Number = top + ( radius_ - Math.cos( Trigonometry.ANGLE_TO_RADS * i ) * radius_ );				// draw segment				graphics_.lineTo( x_ + xPos, y_ + yPos );			}		}		/**		 * Function for drawing rectangle  inside Graphics object		 * based on Rectangle Class instane.		 * @param graphics_ Graphics The Graphics to draw to.		 * @param rect_ Rectangle Rectangle to draw.		 */		public static function drawRectangle( graphics_:Graphics, rect_:Rectangle ):void		{			with ( graphics_ )			{				moveTo( rect_.x,               rect_.y );				lineTo( rect_.x + rect_.width, rect_.y );				lineTo( rect_.x + rect_.width, rect_.y + rect_.height );				lineTo( rect_.x,               rect_.y + rect_.height );				lineTo( rect_.x,               rect_.y );			}		}	}}