/** * Copyright 2011 by Barnabás Bucsy * * This file is part of The Memento Framework. * * The Memento Framework is free software: you can redistribute it * and/or modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation, either * version 3 of the License, or (at your option) any later version. * * The Memento Framework is distributed in the hope that it will be * useful, but WITHOUT ANY WARRANTY; without even the implied warranty * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with The Memento Framework. If not, see * <http://www.gnu.org/licenses/>. */package com.memento.display.filters{	import flash.filters.ColorMatrixFilter;	/**	 * Class to generate hue / saturation filter to be used with DisplayObject or	 * BitmapData. Used ColorMatrixFilter class is final, so we can not extend it.	 * @author Barnabás Bucsy (Lobo)	 */	public class HueSaturationFilterGenerator	{		/**		 * Identity matrix.		 */		public static const IDENTITY:Array = [			1, 0, 0, 0, 0,			0, 1, 0, 0, 0,			0, 0, 1, 0, 0,			0, 0, 0, 1, 0		];		/**		 * Helper matrix used internally.		 */		private static const MATRIX0:Array = [			0.213, 0.715, 0.072,			0.213, 0.715, 0.072,			0.213, 0.715, 0.072		];		/**		 * Helper matrix used internally.		 */		private static const MATRIX1:Array = [			 0.787, -0.715, -0.072,			-0.212,  0.285, -0.072,			-0.213, -0.715,  0.928		];		/**		 * Helper matrix used internally.		 */		private static const MATRIX2:Array = [			-0.213, -0.715,  0.928,			 0.143,  0.140, -0.283,			-0.787,  0.715,  0.072		];		/**		 * Container for hue / saturation ColorMatrixFilter.		 */		private var _filter:ColorMatrixFilter;		/**		 * Container for internally used matrix.		 */		private var _matrix:Array;		/**		 * Hue amount.		 */		private var _hue:Number = 0;		/**		 * Saturation amount		 */		private var _saturation:Number = 0;		/**		 * Constructor		 */		public function HSVFilter( ):void		{			_filter = new ColorMatrixFilter( );			reset( );		}		/**		 * Resets hue and saturation values.		 */		public function reset( ):void		{			_saturation    = 0;			_hue           = 0;			_matrix        = IDENTITY;			_filter.matrix = _matrix;		}		/**		 * Setter function for amount of saturation correction.		 * @param saturation_ Number Amount of saturation correction.		 */		public function set saturation( saturation_:Number ):void		{			_saturation = ( saturation_ > 1 ) ? 1 : ( saturation_ < 0 ) ? 0 : saturation_;			var m:Array = add( MATRIX0, multiply( _saturation, MATRIX1 ) );			concat( [				m[ 0 ], m[ 1 ], m[ 2 ], 0, 0,				m[ 3 ], m[ 4 ], m[ 5 ], 0, 0,				m[ 6 ], m[ 7 ], m[ 8 ], 0, 0,				0,      0,      0,      1, 0			] );		}		/**		 * @private		 * Getter function for amount of saturation correction.		 * @return Number The amount of saturation correction.		 */		public function get saturation( ):Number		{			return _saturation;		}		/**		 * Setter function for amount of hue correction.		 * @param hue_ Number Amount of hue correction.		 */		public function set hue( hue_:Number ):void		{			_hue = hue_;			hue_ = _hue *0.0174532925;			var m:Array = add( MATRIX0, add( multiply( Math.cos( hue_ ), MATRIX1 ), multiply( Math.sin( hue_ ), MATRIX2 ) ) );			concat( [				m[ 0 ], m[ 1 ], m[ 2 ], 0, 0,				m[ 3 ], m[ 4 ], m[ 5 ], 0, 0,				m[ 6 ], m[ 7 ], m[ 8 ], 0, 0,				0,      0,      0,      1, 0			] );		}		/**		 * @private		 * Getter function for amount of hue correction.		 * @return Number The amount of hue correction.		 */		public function get hue( ):Number		{			return _hue;		}		/**		 * Getter function for hue / saturation ColorMatrixFilter instance.		 * @return The hue / saturation ColorMatrixFilter instance.		 */		public function get filter( ):ColorMatrixFilter		{			return _filter;		}		/**		 * Matrix addition.		 * @param a_ Array Matrix 1.		 * @param b_ Array Matrix 2.		 * @return Array The Array resulted from addition.		 */		private function add( a_:Array, b_:Array ):Array		{			var c:Array = [ ];			var j:uint = a_.length;			for ( var i:uint = 0; i < j; i++ )			{				c.push( a_[ i ] + b_[ i ] );			}			return c;		}		/**		 * Vector multiplication.		 * @param x_ Number The Vector.		 * @param a_ Array The Matrix.		 * @return Array The Array resulted from multiplication.		 */		private function multiply( x_:Number, a_:Array ):Array		{			var b:Array = [ ];			for each ( var n:Number in a_)			{				b.push( x_ * n );			}            return b;        }		/**		 * Multiplies current matrix with given one and updates		 * the ColormatrixFilter.		 * @param a_ Array The Matrix.		 */		private function concat( a_:Array ):void		{			var nM:Array = [ ];			nM[ 0 ] = ( _matrix[ 0 ] * a_[ 0 ] ) + ( _matrix[ 1 ] * a_[ 5 ] ) + ( _matrix[ 2 ] * a_[ 10 ] );			nM[ 1 ] = ( _matrix[ 0 ] * a_[ 1 ] ) + ( _matrix[ 1 ] * a_[ 6 ] ) + ( _matrix[ 2 ] * a_[ 11 ] );			nM[ 2 ] = ( _matrix[ 0 ] * a_[ 2 ] ) + ( _matrix[ 1 ] * a_[ 7 ] ) + ( _matrix[ 2 ] * a_[ 12 ] );			nM[ 3 ] = 0;			nM[ 4 ] = 0;			nM[ 5 ] = ( _matrix[ 5 ] * a_[ 0 ] ) + ( _matrix[ 6 ] * a_[ 5 ] ) + ( _matrix[ 7 ] * a_[ 10 ] );			nM[ 6 ] = ( _matrix[ 5 ] * a_[ 1 ] ) + ( _matrix[ 6 ] * a_[ 6 ] ) + ( _matrix[ 7 ] * a_[ 11 ] );			nM[ 7 ] = ( _matrix[ 5 ] * a_[ 2 ] ) + ( _matrix[ 6 ] * a_[ 7 ] ) + ( _matrix[ 7 ] * a_[ 12 ] );			nM[ 8 ] = 0;			nM[ 9 ] = 0;			nM[ 10 ] = ( _matrix[ 10 ] * a_[ 0 ] ) + ( _matrix[ 11 ] * a_[ 5 ] ) + ( _matrix[ 12 ] * a_[ 10 ] );			nM[ 11 ] = ( _matrix[ 10 ] * a_[ 1 ] ) + ( _matrix[ 11 ] * a_[ 6 ] ) + ( _matrix[ 12 ] * a_[ 11 ] );			nM[ 12 ] = ( _matrix[ 10 ] * a_[ 2 ] ) + ( _matrix[ 11 ] * a_[ 7 ] ) + ( _matrix[ 12 ] * a_[ 12 ] );			nM[ 13 ] = 0;			nM[ 14 ] = 0;			nM[ 15 ] = 0;			nM[ 16 ] = 0;			nM[ 17 ] = 0;			nM[ 18 ] = 1;			nM[ 19 ] = 0;			_matrix        = nM;			_filter.matrix = _matrix;		}	}} 