/** * Copyright 2011 by Barnabás Bucsy * * This file is part of The Memento Framework. * * The Memento Framework is free software: you can redistribute it * and/or modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation, either * version 3 of the License, or (at your option) any later version. * * The Memento Framework is distributed in the hope that it will be * useful, but WITHOUT ANY WARRANTY; without even the implied warranty * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with The Memento Framework. If not, see * <http://www.gnu.org/licenses/>. */package com.memento.utils{	import com.memento.converters.EntityConverter;	import com.memento.constants.patterns.HTMLPatterns;	import com.memento.core.regexp.StaticRegExpUser;	import com.memento.utils.StringUtil;	/**	 * STATIC Class for managing HTML in ActionScript.	 * @author Barnabás Bucsy (Lobo)	 */	public class HTMLUtil extends StaticRegExpUser	{		/**		 * Constant for HTML line break tag.		 */		public static const LINE_BREAK:String = '<br/>';		/**		 * Flag telling whether currently executed HTML tag is a close tag.		 */		private static var __slash:String = '/';		private static var __closeTag:Boolean;		//-------------		// CONSTRUCTOR		//-------------		/**		 * Constructor		 * @throws Error Static Class.		 */		public function HTMLUtil( ):void		{			throw new Error( 'Tried to instantiate static class!' );		}		//-----------		// STRIPPING		//-----------		/**		 * Strips all HTML tags from a String.		 * @param string_ String The String to strip.		 * @return The stripped String.		 */		public static function stripHTML( string_:String ):String		{			fetchCollector( );			return string_.replace( __collector.get(				HTMLPatterns.HTML_TAG,				true			), StringUtil.EMPTY );		}		/**		 * Strips specified HTML tags from a String.		 * @param string_ String The String to strip.		 * @param expression_ String Expression to use searching for the tags.		 * @return The stripped String.		 * @see com.memento.constants.patterns.HTMLPatterns		 */		public static function stripHTMLTags( string_:String, expression_:String ):String		{			fetchCollector( );			return string_.replace( __collector.get(				expression_,				true, true			), StringUtil.EMPTY );		}		//--------		// FORMAT		//--------		/**		 * Formats a HTML String based on standards.		 * @param string_ String The HTML String to format.		 * @return String The formatted HTML String.		 */		public static function formatHTML( string_:String ):String		{			fetchCollector( );			// format all tags			return string_.replace(				__collector.get( HTMLPatterns.HTML_TAG, true ),				formatHTMLTag			);		}		/**		 * Formats a found HTML tag.		 * @param String The HTML tag to format.		 * @param ...args_ Array Rest parameter for sub-matches.		 */		private static function formatHTMLTag( string_:String, ...args_:Array ):String		{			__closeTag = string_.charAt( 1 ) == __slash;			// lowercase tag name			string_ = string_.replace(				__collector.get( HTMLPatterns.HTML_TAG_NAME ),				StringUtil.uncapitalize			);			// check if it is a line break tag			if ( string_.match( __collector.get( HTMLPatterns.LINE_BREAK ) ) )			{				// return proper line break, no more formatting				return LINE_BREAK;			}			if ( !__closeTag )			{				// format attributes				string_ = string_.replace(					__collector.get( HTMLPatterns.HTML_ATTRIBUTE, true ),					formatHTMLAttribute				);			}			return string_;		}		/**		 * Formats a found HTML attribute.		 * @param String The HTML attribute to format.		 * @param ...args_ Array Rest parameter for sub-matches.		 */		private static function formatHTMLAttribute( string_:String, ...args_:Array ):String		{			// trim attribute			string_ = StringUtil.trim( string_ );			// lowercase attribute name			string_ = string_.replace(				__collector.get( HTMLPatterns.HTML_ATTRIBUTE_NAME ),				StringUtil.uncapitalize			);			// format value			string_ = string_.replace(				__collector.get( HTMLPatterns.HTML_ATTRIBUTE_VALUE ),				formatHTMLAttributeValue			);			return StringUtil.SPACE + string_;		}		/**		 * Formats a found HTML attribute value containing quotes or accents.		 * @param String The HTML attribute to format.		 * @param ...args_ Array Rest parameter for sub-matches.		 */		private static function formatHTMLAttributeValue( string_:String, ...args_:Array ):String		{			// ensure only accents are used			string_ = string_.replace(				__collector.get( HTMLPatterns.ESCAPED_ACCENT_OR_QUOTE, true ),				HTMLPatterns.ACCENT			);			// strip escape signs			string_ = string_.replace(				__collector.get( HTMLPatterns.ESCAPE, true ),				StringUtil.EMPTY			);			// ensure starting and ending quote			string_ = string_.replace(				__collector.get( HTMLPatterns.START_END_ACCENT, true ),				HTMLPatterns.QUOTE			);			return string_;		}		/**		 * Removes HTML tags from a String, but tries to keep		 * basic formatting where possible.		 * @param string_ String The String to strip.		 * @return String The stripped String.		 */		public static function toPlain( string_:String ):String		{			string_ = StringUtil.trim( EntityConverter.fullUnescape( string_ ) );			string_ = StringUtil.limitLineBreakCount( convertLineBreaks( string_ ), 2 );			string_ = stripHTML( string_ );			return string_;		}		/**		 * Converts known linebreaks to given character sequence. If no		 * sequence is present, EOL will be used.		 * @param string_ String The String to modify.		 * @param sequence Character sequence representing line end.		 * @return String The modified String.		 */		public static function convertLineBreaks( string_:String, sequence_:String = null ):String		{			if ( sequence_ == null )			{				sequence_ = StringUtil.EOL;			}			fetchCollector( );			string_ = string_.replace( __collector.get(				HTMLPatterns.NEW_LINE_TYPES,				true, true			), sequence_ );			return StringUtil.trimLines( stripHTMLTags( string_, HTMLPatterns.PARAGRAPH ) );		}	}}