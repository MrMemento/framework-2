/** * Copyright 2011 by Barnabás Bucsy * * This file is part of The Memento Framework. * * The Memento Framework is free software: you can redistribute it * and/or modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation, either * version 3 of the License, or (at your option) any later version. * * The Memento Framework is distributed in the hope that it will be * useful, but WITHOUT ANY WARRANTY; without even the implied warranty * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with The Memento Framework. If not, see * <http://www.gnu.org/licenses/>. */package com.memento.utils{	import com.memento.constants.Trigonometry;	import com.memento.utils.StringUtil;	/**	 * STATIC Class for managing Numbers in ActionScript.	 * @author Barnabás Bucsy (Lobo)	 */	public class NumberUtil	{		/**		 * Constructor		 * @throws Error Static Class.		 */		public function NumberUtil( ):void		{			throw new Error( 'Tried to instantiate static class!' );		}		//------------		// FORMATTING		//------------		/**		 * Returns the number formatted on given places.		 * @param uint The unsigned integer to format.		 * @param hexa_ Wether to use hexadecimal format.		 * @param length_ The number of places to represent the number on.		 * @return String The fixed length String representation.		 * @throws Error Throws Error if uint_'s length as String is bigger than length_.		 * @see com.memento.utils.StringUtil.padLeft		 */		public static function toFixedPlaces( uint_:uint, length_:uint = 2, hexa_:Boolean = false ):String		{			return StringUtil.padLeft( uint_.toString( hexa_? 16 : 10 ), '0', length_ );		}		/**		 * Converts NaN to zero.		 * @param num_ Number The Number to check.		 * @return Number 0 if NaN, or the value of the Number.		 */		public static function NaNToZero( num_:Number ):Number		{			if ( isNaN( num_ ) )			{				return 0;			}			else			{				return num_;			}		}		/**		 * Converts angle to radians.		 * @param angle_ Number The angle to convert.		 * @param limit_ Boolean If set to true, forces angle in [0, 360) interval.		 * @return Number The angle in radians.		 */		public static function toRadians( angle_:Number, limit_:Boolean = false ):Number		{			if ( limit_ )			{				angle_ = limitAngle( angle_ );			}			return angle_ * Trigonometry.ANGLE_TO_RADS;		}		/**		 * Converts radians to angle.		 * @param radians_ Number The radians to convert.		 * @param limit_ Boolean If set to true, forces angle in [0, 360) interval.		 * @return Number The radians in angle.		 */		public static function toAngle( radians_:Number, limit_:Boolean = false ):Number		{			var angle:Number = radians_ * Trigonometry.RADS_TO_ANGLE;			if ( limit_ )			{				angle = limitAngle( angle );			}			return angle;		}		/**		 * Limits angle to [0, 360) interval.		 * @param angle_ Number The angle to limit.		 * @return Number The limited angle.		 */		public static function limitAngle( angle_:Number ):Number		{			angle_ %= 360;			if ( angle_ < 0 )			{				angle_ += 360;			}			return angle_;		}		/**		 * Forces a Number into an intervalluum.		 * @param toForce_ Number The Number to force.		 * @param minValue_ Number Intervalluum start.		 * @param maxValue_ Number Intervalluum end.		 * @return Number The forced Number.		 */		public static function forceIntervalluum( toForce_:Number, minValue_:Number, maxValue_:Number ):Number		{			if ( minValue_ > maxValue_ )			{				throw new Error( 'Bad intevalluum specified: [ ' + minValue_.toString( ) + ', ' + maxValue_.toString( ) );			}			if ( toForce_ < minValue_ )			{				toForce_ = minValue_;			}			else if ( toForce_ > maxValue_ )			{				toForce_ = maxValue_;			}			return toForce_;		}	}}