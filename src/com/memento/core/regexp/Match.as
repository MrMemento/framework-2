/** * Copyright 2011 by Barnabás Bucsy * * This file is part of The Memento Framework. * * The Memento Framework is free software: you can redistribute it * and/or modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation, either * version 3 of the License, or (at your option) any later version. * * The Memento Framework is distributed in the hope that it will be * useful, but WITHOUT ANY WARRANTY; without even the implied warranty * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with The Memento Framework. If not, see * <http://www.gnu.org/licenses/>. */package com.memento.core.regexp{	/**	 * STATIC Class for utilizing RegExp results.	 * @author Barnabás Bucsy (Lobo)	 */	public class Match	{		/**		 * The String on which the operation was perfomred on.		 */		public var input:String;		/**		 * The content of the Match.		 */		public var content:String;		/**		 * The length of the Match.		 */		public var length:uint;		/**		 * The character position of the start of the matched substring within input.		 */		public var startIndex:uint;		/**		 * The character position of the end of the matched substring within input.		 */		public var endIndex:uint;		/**		 * The submatches of the match, if any.		 */		public var subMatches:Array;		/**		 * Constructor		 * @param result_ Object The result of a RegExp exec.		 * @param subMatches_ Boolean Whether to store submatches.		 */		public function Match( result_:Object = null, subMatches_:Boolean = false ):void		{			if ( result_ !== null )			{				input      = result_.input;				content    = result_[ 0 ];				length     = content.length;				startIndex = result_.index;				endIndex   = startIndex + length;				if ( subMatches_ )				{					subMatches = [ ];					var j:uint = result_.length;					for ( var i:uint = 1; i < j; i++ )					{						subMatches[ i -1 ] = result_[ i ];					}				}			}		}	}}