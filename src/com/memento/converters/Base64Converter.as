/** * Copyright 2011 by Barnabás Bucsy * * This file is part of The Memento Framework. * * The Memento Framework is free software: you can redistribute it * and/or modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation, either * version 3 of the License, or (at your option) any later version. * * The Memento Framework is distributed in the hope that it will be * useful, but WITHOUT ANY WARRANTY; without even the implied warranty * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with The Memento Framework. If not, see * <http://www.gnu.org/licenses/>. * * SEE ORIGINAL LICENSE AT THE BOTTOM */package com.memento.converters{	import flash.utils.ByteArray;	/**	 * STATIC Class for encoding and decoding Base64 strings.	 * @author Barnabás Bucsy (Lobo)	 */	public class Base64Converter	{		/**		 * Characters used in Base64 format.		 */		private static const BASE64_CHARS:String = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';		/**		 * Constructor		 * @throws Error Static Class.		 */		public function Base64Converter( ):void		{			throw new Error( 'Tried to instantiate static class!' );		}		/**		 * Encodes a String with Base64 method.		 * @param data_ String The String to encode.		 * @return String The encoded String.		 */		public static function encode( data_:String ):String		{			// convert string to ByteArray			var bytes:ByteArray = new ByteArray( );			bytes.writeUTFBytes( data_ );			// return encoded ByteArray			return encodeByteArray( bytes );		}		/**		 * Encodes a ByteArray with Base64 method.		 * @param data_ ByteArray The ByteArray to encode.		 * @return String The encoded String.		 */		public static function encodeByteArray( data_:ByteArray ):String		{			// initialize output			var output:String = '';			// create data and output buffers			var dataBuffer:Array   = [ ];			var outputBuffer:Array = new Array( 4 );			// rewind ByteArray			data_.position = 0;			// while there are still bytes to be processed			var i:uint;			var j:uint;			while ( data_.bytesAvailable > 0 )			{				// create new data buffer and populate next 3 bytes from data				for ( i = 0; i < 3 && data_.bytesAvailable > 0; i++ )				{					dataBuffer[ i ] = data_.readUnsignedByte( );				}				// convert to data buffer Base64 character positions and				// store in output buffer				outputBuffer[ 0 ] = ( dataBuffer[ 0 ] &0xFC ) >>2;				outputBuffer[ 1 ] = ( ( dataBuffer[ 0 ] &0x03 ) <<4 ) | ( ( dataBuffer[ 1 ] ) >>4 );				outputBuffer[ 2 ] = ( ( dataBuffer[ 1 ] &0x0F ) <<2 ) | ( ( dataBuffer[ 2 ] ) >>6 );				outputBuffer[ 3 ] = dataBuffer[ 2 ] &0x3F;				// if data buffer was short (i.e not 3 characters) then set				// end character indexes in data buffer to index of '=' symbol,				// this is necessary because Base64 data is always a multiple of				// 4 bytes and is basses with '=' symbols.				for ( i = dataBuffer.length; i < 3; i++ )				{					outputBuffer[ i +1 ] = 64;				}				// loop through output buffer and add Base64 characters to				// encoded data string for each character.				j = outputBuffer.length;				for ( i = 0; i < j; i++ )				{					output += BASE64_CHARS.charAt( outputBuffer[ i ] );				}				dataBuffer.length = 0;			}			// return encoded data			return output;		}		/**		 * Decodes a String with Base64 method.		 * @param data_ String The String to decode.		 * @return String The decoded String.		 */		public static function decode( data_:String ):String		{			// decode data to ByteArray			var bytes:ByteArray = decodeToByteArray( data_ );			// convert to string and return			return bytes.readUTFBytes( bytes.length );		}		/**		 * Decodes a String with Base64 method to a ByteArray.		 * @param data_ String The String to decode.		 * @return ByteArray The decoded ByteArray.		 */		public static function decodeToByteArray( data_:String ):ByteArray		{			// initialise output ByteArray for decoded data			var output:ByteArray = new ByteArray( );			// create data and output buffers			var dataBuffer:Array   = new Array( 4 );			var outputBuffer:Array = new Array( 3 );			var j:uint;			var k:uint;			// while there are data bytes left to be processed			for ( var i:uint = 0; i < data_.length; i += 4 )			{				// populate data buffer with position of Base64 characters for				// next 4 bytes from encoded data				for ( j = 0; j < 4 && i + j < data_.length; j++ )				{					dataBuffer[ j ] = BASE64_CHARS.indexOf( data_.charAt( i + j ) );				}      			// decode data buffer back into bytes				outputBuffer[ 0 ] = ( dataBuffer[ 0 ] <<2 ) + ( ( dataBuffer[ 1 ] &0x30 ) >>4);				outputBuffer[ 1 ] = ( ( dataBuffer[ 1 ] & 0x0F ) <<4 ) + ( ( dataBuffer[ 2 ] &0x3C ) >>2 );				outputBuffer[ 2 ] = ( ( dataBuffer[ 2 ] & 0x03 ) <<6 ) + dataBuffer[ 3 ];				// add all non-padded bytes in output buffer to decoded data				k = outputBuffer.length;				for ( j = 0; j < k; j++ )				{					if ( dataBuffer[ j +1 ] == 64 )						break;					output.writeByte( outputBuffer[ j ] );				}			}			// rewind decoded data ByteArray			output.position = 0;			// return decoded data			return output;		}	}}/** * --------------------------------------------------------------------------------- *  ORIGINAL CODE LICENSE * --------------------------------------------------------------------------------- * * Base64 - 1.1.0 * Copyright (c) 2006 Steve Webster * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */