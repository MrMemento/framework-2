/** * Copyright 2011 by Barnabás Bucsy * * This file is part of The Memento Framework. * * The Memento Framework is free software: you can redistribute it * and/or modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation, either * version 3 of the License, or (at your option) any later version. * * The Memento Framework is distributed in the hope that it will be * useful, but WITHOUT ANY WARRANTY; without even the implied warranty * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with The Memento Framework. If not, see * <http://www.gnu.org/licenses/>. */package com.memento.converters{	/**	 * Class for converting HTML and numeric entities.	 * @author Barnabás Bucsy (Lobo)	 */	public class EntityConverter	{		/**		 * Private flag representing inited status. Init will generate		 * static public CHARACTERS Array, because some characters may		 * corrupt with editor/compiler.		 */		private static var __inited:Boolean = false;		/**		 * Container for characters to be used with entity conversion.		 * Will be generated up upon init, because some characters may		 * corrupt with editor/compiler.		 */		public static var CHARACTERS:Array = [ ];		/**		 * Container for HTM entities to be used with entity conversion.		 * Extend on own will. Mind order when extending!		 * '&amp;amp;' ('&amp;') shoud be the first element in the list!		 */		public static var HTML_ENTITIES:Array = [			'&amp;',		'&iexcl;',		'&cent;',		'&pound;',		'&curren;',			'&yen;',		'&brvbar;',		'&sect;',		'&uml;',		'&copy;',			'&ordf;',		'&laquo;',		'&not;',		'&shy;',		'&reg;',			'&macr;',		'&deg;',		'&plusmn;',		'&sup2;',		'&sup3;',			'&acute;',		'&micro;',		'&para;',		'&middot;',		'&cedil;',			'&sup1;',		'&ordm;',		'&raquo;',		'&frac14;',		'&frac12;',			'&frac34;',		'&iquest;',		'&Agrave;',		'&Aacute;',		'&Acirc;',			'&Atilde;',		'&Auml;',		'&Aring;',		'&AElig;',		'&Ccedil;',			'&Egrave;',		'&Eacute;',		'&Ecirc;',		'&Euml;',		'&Igrave;',			'&Iacute;',		'&Icirc;',		'&Iuml;',		'&ETH;',		'&Ntilde;',			'&Ograve;',		'&Oacute;',		'&Ocirc;',		'&Otilde;',		'&Ouml;',			'&times;',		'&Oslash;',		'&Ugrave;',		'&Uacute;',		'&Ucirc;',			'&Uuml;',		'&Yacute;',		'&THORN;',		'&szlig;',		'&agrave;',			'&aacute;',		'&acirc;',		'&atilde;',		'&auml;',		'&aring;',			'&aelig;',		'&ccedil;',		'&egrave;',		'&eacute;',		'&ecirc;',			'&euml;',		'&igrave;',		'&iacute;',		'&icirc;',		'&iuml;',			'&eth;',		'&ntilde;',		'&ograve;',		'&oacute;',		'&ocirc;',			'&otilde;',		'&ouml;',		'&divide;',		'&oslash;',		'&ugrave;',			'&uacute;',		'&ucirc;',		'&uuml;',		'&yacute;',		'&thorn;',			'&yuml;',		'&fnof;',		'&Alpha;',		'&Beta;',		'&Gamma;',			'&Delta;',		'&Epsilon;',	'&Zeta;',		'&Eta;',		'&Theta;',			'&Iota;',		'&Kappa;',		'&Lambda;',		'&Mu;',			'&Nu;',			'&Xi;',			'&Omicron;',	'&Pi;',			'&Rho;',		'&Sigma;',			'&Tau;',		'&Upsilon;',	'&Phi;',		'&Chi;',		'&Psi;',			'&Omega;',		'&alpha;',		'&beta;',		'&gamma;',		'&delta;',			'&epsilon;',	'&zeta;',		'&eta;',		'&theta;',		'&iota;',			'&kappa;',		'&lambda;',		'&mu;',			'&nu;',			'&xi;',			'&omicron;',	'&pi;',			'&rho;',		'&sigmaf;',		'&sigma;',			'&tau;',		'&upsilon;',	'&phi;',		'&chi;',		'&psi;',			'&omega;',		'&thetasym;',	'&upsih;',		'&piv;',		'&bull;',			'&hellip;',		'&prime;',		'&Prime;',		'&oline;',		'&frasl;',			'&weierp;',		'&image;',		'&real;',		'&trade;',		'&alefsym;',			'&larr;',		'&uarr;',		'&rarr;',		'&darr;',		'&harr;',			'&crarr;',		'&lArr;',		'&uArr;',		'&rArr;',		'&dArr;',			'&hArr;',		'&forall;',		'&part;',		'&exist;',		'&empty;',			'&nabla;',		'&isin;',		'&notin;',		'&ni;',			'&prod;',			'&sum;',		'&minus;',		'&lowast;',		'&radic;',		'&prop;',			'&infin;',		'&ang;',		'&and;',		'&or;',			'&cap;',			'&cup;',		'&int;',		'&there4;',		'&sim;',		'&cong;',			'&asymp;',		'&ne;',			'&equiv;',		'&le;',			'&ge;',			'&sub;',		'&sup;',		'&nsub;',		'&sube;',		'&supe;',			'&oplus;',		'&otimes;',		'&perp;',		'&sdot;',		'&lceil;',			'&rceil;',		'&lfloor;',		'&rfloor;',		'&lang;',		'&rang;',			'&loz;',		'&spades;',		'&clubs;',		'&hearts;',		'&diams;',			'&quot;',		'&nbsp;',		'&lt;',			'&gt;',			'&OElig;',			'&oelig;',		'&Scaron;',		'&scaron;',		'&Yuml;',		'&circ;',			'&tilde;',		'&ensp;',		'&emsp;',		'&thinsp;',		'&zwnj;',			'&zwj;',		'&lrm;',		'&rlm;',		'&ndash;',		'&mdash;',			'&lsquo;',		'&rsquo;',		'&sbquo;',		'&ldquo;',		'&rdquo;',			'&bdquo;',		'&dagger;',		'&Dagger;',		'&permil;',		'&lsaquo;',			'&rsaquo;',		'&euro;'		];		/**		 * Container for numeric entities to be used with entity conversion.		 * Extend on own will. Mind order when extending!		 * '&amp;#0038;' ('&amp;') shoud be the first element in the list!		 */		public static var NUMERIC_ENTITIES:Array = [			'&#0038;',		'&#0161;',		'&#0162;',		'&#0163;',		'&#0164;',			'&#0165;',		'&#0166;',		'&#0167;',		'&#0168;',		'&#0169;',			'&#0170;',		'&#0171;',		'&#0172;',		'&#0173;',		'&#0174;',			'&#0175;',		'&#0176;',		'&#0177;',		'&#0178;',		'&#0179;',			'&#0180;',		'&#0181;',		'&#0182;',		'&#0183;',		'&#0184;',			'&#0185;',		'&#0186;',		'&#0187;',		'&#0188;',		'&#0189;',			'&#0190;',		'&#0191;',		'&#0192;',		'&#0193;',		'&#0194;',			'&#0195;',		'&#0196;',		'&#0197;',		'&#0198;',		'&#0199;',			'&#0200;',		'&#0201;',		'&#0202;',		'&#0203;',		'&#0204;',			'&#0205;',		'&#0206;',		'&#0207;',		'&#0208;',		'&#0209;',			'&#0210;',		'&#0211;',		'&#0212;',		'&#0213;',		'&#0214;',			'&#0215;',		'&#0216;',		'&#0217;',		'&#0218;',		'&#0219;',			'&#0220;',		'&#0221;',		'&#0222;',		'&#0223;',		'&#0224;',			'&#0225;',		'&#0226;',		'&#0227;',		'&#0228;',		'&#0229;',			'&#0230;',		'&#0231;',		'&#0232;',		'&#0233;',		'&#0234;',			'&#0235;',		'&#0236;',		'&#0237;',		'&#0238;',		'&#0239;',			'&#0240;',		'&#0241;',		'&#0242;',		'&#0243;',		'&#0244;',			'&#0245;',		'&#0246;',		'&#0247;',		'&#0248;',		'&#0249;',			'&#0250;',		'&#0251;',		'&#0252;',		'&#0253;',		'&#0254;',			'&#0255;',		'&#0402;',		'&#0913;',		'&#0914;',		'&#0915;',			'&#0916;',		'&#0917;',		'&#0918;',		'&#0919;',		'&#0920;',			'&#0921;',		'&#0922;',		'&#0923;',		'&#0924;',		'&#0925;',			'&#0926;',		'&#0927;',		'&#0928;',		'&#0929;',		'&#0931;',			'&#0932;',		'&#0933;',		'&#0934;',		'&#0935;',		'&#0936;',			'&#0937;',		'&#0945;',		'&#0946;',		'&#0947;',		'&#0948;',			'&#0949;',		'&#0950;',		'&#0951;',		'&#0952;',		'&#0953;',			'&#0954;',		'&#0955;',		'&#0956;',		'&#0957;',		'&#0958;',			'&#0959;',		'&#0960;',		'&#0961;',		'&#0962;',		'&#0963;',			'&#0964;',		'&#0965;',		'&#0966;',		'&#0967;',		'&#0968;',			'&#0969;',		'&#0977;',		'&#0978;',		'&#0982;',		'&#8226;',			'&#8230;',		'&#8242;',		'&#8243;',		'&#8254;',		'&#8260;',			'&#8472;',		'&#8465;',		'&#8476;',		'&#8482;',		'&#8501;',			'&#8592;',		'&#8593;',		'&#8594;',		'&#8595;',		'&#8596;',			'&#8629;',		'&#8656;',		'&#8657;',		'&#8658;',		'&#8659;',			'&#8660;',		'&#8704;',		'&#8706;',		'&#8707;',		'&#8709;',			'&#8711;',		'&#8712;',		'&#8713;',		'&#8715;',		'&#8719;',			'&#8721;',		'&#8722;',		'&#8727;',		'&#8730;',		'&#8733;',			'&#8734;',		'&#8736;',		'&#8743;',		'&#8744;',		'&#8745;',			'&#8746;',		'&#8747;',		'&#8756;',		'&#8764;',		'&#8773;',			'&#8776;',		'&#8800;',		'&#8801;',		'&#8804;',		'&#8805;',			'&#8834;',		'&#8835;',		'&#8836;',		'&#8838;',		'&#8839;',			'&#8853;',		'&#8855;',		'&#8869;',		'&#8901;',		'&#8968;',			'&#8969;',		'&#8970;',		'&#8971;',		'&#9001;',		'&#9002;',			'&#9674;',		'&#9824;',		'&#9827;',		'&#9829;',		'&#9830;',			'&#0034;',		'&#0160;',		'&#0060;',		'&#0062;',		'&#0338;',			'&#0339;',		'&#0352;',		'&#0353;',		'&#0376;',		'&#0710;',			'&#0732;',		'&#8194;',		'&#8195;',		'&#8201;',		'&#8204;',			'&#8205;',		'&#8206;',		'&#8207;',		'&#8211;',		'&#8212;',			'&#8216;',		'&#8217;',		'&#8218;',		'&#8220;',		'&#8221;',			'&#8222;',		'&#8224;',		'&#8225;',		'&#8240;',		'&#8249;',			'&#8250;',		'&#8364;'		];		/**		 * Length of known entities.		 */		public static var LENGTH:uint = NUMERIC_ENTITIES.length;		/**		 * Constructor		 * @throws Error Static Class.		 */		public function EntityConverter( ):void		{			throw new Error( 'Tried to instantiate static class!' );		}		//-------------------		// PRIVATE FUNCTIONS		//-------------------		/**		 * Private function for converting special characters in a String		 * into their HTML entity representation. Assumes that no entities		 * are present in the String.		 * @param str_ String The String to convert to HTML entity format.		 * @return String The String containing HTML entities.		 */		private static function htmlEntityEscape( str_:String ):String		{			if ( str_ != null && str_.length > 0 )			{				for ( var i:uint = 0; i < LENGTH; i++ )				{					str_ = str_.replace( new RegExp( CHARACTERS[ i ], 'g' ), HTML_ENTITIES[ i ] );				}				return str_;			}			else			{				return '';			}		}		/**		 * Private function for converting found HTML entities in presented		 * String into their character representation. Assumes only HTML		 * entities are present in the String.		 * @param str_ String The String to escape from HTML entity format.		 * @return String The String containing only characters.		 */		private static function htmlEntityUnescape( str_:String ):String		{			if ( str_ != null && str_.length > 0 )			{				for ( var i:uint = 0; i < LENGTH; i++ )				{					str_ = str_.replace( new RegExp( HTML_ENTITIES[ i ], 'g' ), CHARACTERS[ i ] );				}				return str_;			}			else			{				return '';			}		}		/**		 * Private function for converting special characters in a String		 * into their numeric entity representation. Assumes that no		 * entities are present in the String.		 * @param str_ String The String to convert to numeric entity format.		 * @return String The String containing numeric entities.		 */		private static function numericEntityEscape( str_:String ):String		{			if ( str_ && str_.length > 0 )			{				for ( var i:uint = 0; i < LENGTH; i++ )				{					str_ = str_.replace( new RegExp( CHARACTERS[ i ], 'g' ), NUMERIC_ENTITIES[ i ] );				}				return str_;			}			else			{				return '';			}		}		/**		 * Private function for converting found numeric entities in		 * presented String into their character representation. Assumes		 * only numeric entities are present in the String.		 * @param str_ String The String to escape from numeric entity format.		 * @return String The String containing only characters.		 */		private static function numericEntityUnescape( str_:String ):String		{			if ( str_ && str_.length > 0 )			{				for ( var i:uint = 0; i < LENGTH; i++ )				{					str_ = str_.replace( new RegExp( NUMERIC_ENTITIES[ i ], 'g' ), CHARACTERS[ i ] );				}				return str_;			}			else			{				return '';			}		}		//------------------		// PUBLIC INTERFACE		//------------------		/**		 * Fully unescapes all known numeric and HTML entities.		 * @param str_ String The String to unescape.		 * @return String The unescaped String.		 */		public static function fullUnescape( str_:String ):String		{			init( );			return htmlEntityUnescape( numericEntityUnescape( str_ ) );		}		/**		 * Returns a String containing only HTML entity escaped characters.		 * @param str_ String The String to escape.		 * @return String The HTML entity escaped String.		 */		public static function htmlEscape( str_:String ):String		{			init( );			return htmlEntityEscape( fullUnescape( str_ ) );		}		/**		 * Returns a String containing only numeric entity escaped characters.		 * @param str_ String The String to escape.		 * @return String The numeric entity escaped String.		 */		public static function numericEscape( str_:String ):String		{			init( );			return numericEntityEscape( fullUnescape( str_ ) );		}		/**		 * Init function. Will generate static public CHARACTERS Array, because		 * some characters may corrupt with editor/compiler.		 */		public static function init( ):void		{			if ( __inited )			{				return;			}			for ( var i:uint = 0; i < LENGTH; i++ )			{				CHARACTERS[ i ] = String.fromCharCode( parseInt( NUMERIC_ENTITIES[ i ].substr( 2, NUMERIC_ENTITIES[ i ].length -1 ) ) );			}			__inited = true;		}	}}